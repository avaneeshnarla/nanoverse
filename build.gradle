apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'java'

version = '1.0.0-a2'
mainClassName = 'nanoverse.Nanoverse'

/*
 * Nanoverse: a declarative agent-based modeling language for natural and
 * social science.
 *
 * Copyright (c) 2015 David Bruce Borenstein and Nanoverse, LLC.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

// Run with command line argument "-PpetscDebug=true" to enable PETSc debugging
ext.petscDebug = project.hasProperty('petscDebug') ?
        project.getProperty('petscDebug') : false

sourceSets {
    main {
        java.srcDirs = ['src', 'mocks', 'meta/src']
    }
    test {
        java.srcDirs = ['tests']
    }
}

repositories {
    mavenCentral()
}

def osName = System.getProperty('os.name').toLowerCase().split()[0]
dependencies {
    compile 'com.google.guava:guava:14.+',
            'com.googlecode.matrix-toolkits-java:mtj:1.+',
            'com.keypoint:png-encoder:1.+',
            'org.antlr:antlr4-runtime:4.5+',
            'log4j:log4j:1.2+',
            'org.slf4j:slf4j-api:1.7+',
            'org.slf4j:slf4j-log4j12:1.7+',
            'junit:junit:4.+',
            'org.antlr:stringtemplate:4.0.2+',
            'org.powermock:powermock-module-junit4:1.6.2+',
            'org.powermock:powermock-api-mockito:1.6.2+',
            'org.reflections:reflections:0.9.10+'
    testCompile 'org.apache.directory.studio:org.apache.commons.io:2.+',
                'org.mockito:mockito-all:1.+'
    if (osName.equals("linux") || osName.equals("mac")) {
        runtime files('./lib/libpetscsolver.dylib') {
            builtBy 'buildPetscSolver'
        }
    }
}

// Set native library path for test JVMs and runtime JVMs
def libraryPath = projectDir.toString() + '/lib'
tasks.withType(Test) {
    systemProperty "java.library.path", libraryPath
}
applicationDefaultJvmArgs = ['-Djava.library.path=' + libraryPath]

// Class files contain parameter names
tasks.withType(JavaCompile) { 
     // this subproject requires -parameters option
     options.compilerArgs << '-parameters'
}

/*
 * Building PETSc and the PETSc solver
 */

// Downloads PETSc if the user forgot to run git copy --recursive
task updateGitSubmodules(type:Exec) {
    commandLine 'git', 'submodule', 'update', '--init', '--recursive'
}

// Configures a debug build of PETSc
task configurePetscDebug(type:Exec, dependsOn:'updateGitSubmodules') {
    workingDir './lib/petsc'
    outputs.dir(new File('./lib/petsc/petsc-debug'))
    commandLine './configure', 'PETSC_ARCH=petsc-debug', '--with-cc=gcc ',
                '--with-cxx=0', '--with-fc=0', '--with-mpi=0',
                '--download-f2cblaslapack'
}

// Configures an optimized build of PETSc
task configurePetscOpt(type:Exec, dependsOn:'updateGitSubmodules') {
    workingDir './lib/petsc'
    outputs.dir(new File('./lib/petsc/petsc-opt'))
    commandLine './configure', 'PETSC_ARCH=petsc-opt', '--with-cc=gcc ',
                '--with-cxx=0', '--with-fc=0', '--with-mpi=0',
                '--download-f2cblaslapack', '--with-debugging=0',
                'COPTFLAGS=\'-O3 -march=native -mtune=native\''
}

// Compiles a debug build of PETSc
task makePetscDebug(type:Exec, dependsOn:'configurePetscDebug') {
    workingDir './lib/petsc'
    outputs.dir(new File('./lib/petsc/petsc-debug'))
    commandLine 'make', 'PETSC_DIR=' + projectDir.toString() + '/lib/petsc',
                'PETSC_ARCH=petsc-debug', 'all', 'test'
}

// Compiles an optimized build of PETSc
task makePetscOpt(type:Exec, dependsOn:'configurePetscOpt') {
    workingDir './lib/petsc'
    outputs.dir(new File('./lib/petsc/petsc-opt'))
    commandLine 'make', 'PETSC_DIR=' + projectDir.toString() + '/lib/petsc',
            'PETSC_ARCH=petsc-opt', 'all', 'test'
}

task buildPetscSolver(type:Exec, dependsOn:['makePetscDebug', 'makePetscOpt']) {
    workingDir './src/petscSolver'
    inputs.dir(new File('./src/petscSolver/src'))
    inputs.property('petscDebug', petscDebug)
    outputs.file(new File('./lib/libpetscsolver.dylib'))
    environment('PETSC_DIR', projectDir.toString() + '/lib/petsc')
    if (petscDebug) {
        environment('PETSC_ARCH', 'petsc-debug')
    } else {
        environment('PETSC_ARCH', 'petsc-opt')
    }
    commandLine 'make', 'libpetscsolver'
}

task standaloneJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Nanoverse',
                'Implementation-Version': version,
                'Main-Class': 'nanoverse.Nanoverse'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() || it.getName().endsWith(".pom") ? it : zipTree(it) } }
    with jar
}
