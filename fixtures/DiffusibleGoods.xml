<!--
  ~ Copyright (c) 2014, 2015 David Bruce Borenstein and the
  ~ Trustees of Princeton University.
  ~
  ~ This file is part of the Nanoverse simulation framework
  ~ (patent pending).
  ~
  ~ This program is free software: you can redistribute it
  ~ and/or modify it under the terms of the GNU Affero General
  ~ Public License as published by the Free Software
  ~ Foundation, either version 3 of the License, or (at your
  ~ option) any later version.
  ~
  ~ This program is distributed in the hope that it will be
  ~ useful, but WITHOUT ANY WARRANTY; without even the implied
  ~ warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  ~ PURPOSE.  See the GNU Affero General Public License for
  ~ more details.
  ~
  ~ You should have received a copy of the GNU Affero General
  ~ Public License along with this program.  If not, see
  ~ <http://www.gnu.org/licenses/>.
  -->

<!-- Integration test fixture for eSLIME. Creates and destroys sources
     for a solute that diffuses and decays with uniform coefficients
     and "infinite" boundary conditions. -->

<simulation>

    <!-- This must be updated with each release of eSLIME -->
    <version>v0.4.0</version>

    <general>
        <!-- This test is deterministic, but eSLIME requires RS -->
        <random-seed>0</random-seed>

        <!-- We only need one pass -->
        <instances>1</instances>

        <!-- Write to test output directory -->
        <path>./jeslime/tests/output/</path>

        <!-- We only need to reach the third time step (i.e., take 2 steps) -->
        <max-step>2</max-step>

        <!-- Don't use a date stamp (can't reproduce) -->
        <date-stamp>false</date-stamp>

        <!-- We want output from every step -->
        <output-frames>
            <auto mode="all"/>
        </output-frames>
    </general>

    <!-- Use simplest possible geometry -->
    <geometry>
        <shape>
            <class>Rectangle</class>
            <width>32</width>
            <height>32</height>
        </shape>
        <lattice>
            <class>Rectangular</class>
        </lattice>
    </geometry>

    <!-- Declare layers and define their boundary conditions. -->
    <layers>
        <!-- As of eSLIME v0.4.0, only one cell layer is allowed. This may be
             generalized as the need arises. -->
        <cell-layer>
            <boundary>
                <class>Absorbing</class>
            </boundary>
        </cell-layer>

        <!-- We have only one solute layer. -->
        <solute-layer>

            <!-- Since multiple solute layers are allowed, they require an ID.
                 IDs may be any Java string that does not break the XML file! -->
            <id>solute layer 0</id>

            <!-- Specify the boundary condition on the solute layer. -->
            <boundary>
                <class>Absorbing</class>
            </boundary>

            <!-- The solute layer class has to do with the way in which it is
                 expected to be integrated forward (and therefore what solvers
                 may be used with it. -->

            <class>equilibrium</class>

            <!-- Specify the solver to be used for this layer. -->
            <solver>
                <!-- Solve the matrix using a Complex Gradient algorithm. This
                     implementation assumes that the solute reaches steady state,
                     but it does not require that every site has the same
                     coefficient. (It so happens that they do, however.) -->

                <class>SimpleCGS</class>

                <!-- eSLIME solvers begin with a forward-time, center-space
                     discretization of operations. This scheme becomes unstable
                     if the magnitude of any given matrix entry exceeds a certain
                     value, which is generally 1/2n where n is the connectivity
                     of the mesh. A smaller coefficient reduces maximum error. -->
                <max-coefficient>1e-4</max-coefficient>

                <!-- Equilibrium solvers can solve a system larger than the
                     geometry, which is helpful for some boundary conditions. -->
                <range-scale>2</range-scale>
            </solver>

            <!-- The operator tag specifies the base operator associated with
                 this solute field. The base operator can be modified, eg, by
                 transient decay and growth processes (such as feedback) during
                 the simulation. The resulting operator A will be solved with
                 a source vector b as Ax = b. -->
            <operator>
                <compound-operator>
                    <laplacian>
                        <coefficient>25.0</coefficient>
                    </laplacian>
                    <scaling>
                        <coefficient>1.0</coefficient>
                    </scaling>
                </compound-operator>
            </operator>

        </solute-layer>
    </layers>
    <!-- Define the "steps" (actually fixture states) of the test -->

    <processes>

        <!-- Each time step should advance the integrator clock by 1 unit of time. -->
        <tick>
            <dt>1.0</dt>
        </tick>

        <!-- @t=0.0: Place a source at the center. -->
        <fill>
            <cell-descriptor>

                <!-- The Source class is a cell that doesn't eat or divide, but
                     produces a solute at a set rate. -->

                <class>Source</class>

                <!-- "state" is really a lineage here and should be distinguished
                     from state/phenotype in the future (12/21/2013). -->
                <state>0</state>

                <!-- production at source should be 1.0 units / time -->
                <production>1.0</production>

                <!-- specify the layer ID of the target solute layer -->
                <target>solute layer 0</target>

            </cell-descriptor>

            <!-- Place the source at the center of the integrator -->
            <active-sites>
                <mode>list</mode>
                <offset x="0" y="0"/>
            </active-sites>

            <!-- Do this once at t=0. -->
            <period>0</period>
            <start>0</start>
        </fill>

        <!-- @t=1.0: Place another source at the center. -->
        <fill>
            <cell-descriptor>

                <!-- The Source class is a cell that doesn't eat or divide, but
                     produces a solute at a set rate. -->

                <class>Source</class>

                <!-- "state" is really a lineage here and should be distinguished
                     from state/phenotype in the future (12/21/2013). -->
                <state>0</state>

                <!-- production at source should be 1.0 units / time -->
                <production>1.0</production>

                <!-- specify the layer ID of the target solute layer -->
                <target>solute layer 0</target>
            </cell-descriptor>

            <!-- Place the source at the center of the integrator -->
            <active-sites>
                <mode>list</mode>
                <offset x="1" y="0"/>
            </active-sites>

            <!-- Do this once at t=1. -->
            <period>0</period>
            <start>1</start>
        </fill>

        <!-- @t=2.0: Remove the new producer; distribution should be same as original. -->
        <smite>
            <!-- Place the source at the center of the integrator -->
            <active-sites>
                <mode>list</mode>
                <offset x="1" y="0"/>
            </active-sites>

            <!-- Do this once at t=2. -->
            <period>0</period>
            <start>2</start>
        </smite>

        <!-- Resource should be subject to diffusion and decay. -->
        <field-update>
            <target>solute layer 0</target>
        </field-update>
    </processes>

    <!-- Specify the output we want (for comparison to output fixtures) -->
    <writers>

        <!-- Write out a data file containing discrete layer states -->
        <cell-state-writer/>

        <!-- Write out a data file containing continuum layer states -->
        <continuum-state-writer/>

        <!-- Write out parameters to a plain text file -->
        <parameter-writer/>

        <!-- Report progress to stdout -->
        <progress-reporter/>

    </writers>
</simulation>